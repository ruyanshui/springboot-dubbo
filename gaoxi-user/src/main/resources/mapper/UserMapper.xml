<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gaoxi.user.dao.IUserDao">


    <!--查询到的复杂数据（比如查询到几个表中数据）映射到一个结果集当中-->
    <resultMap id="userResultMap" type="com.gaoxi.entity.user.UserEntity">
        <result property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="phone" column="phone"/>
        <result property="mail" column="mail"/>
        <result property="licancePic" column="licance_pic"/>
        <result property="registerTime" column="register_time"/>
        <result property="userTypeEnum" column="user_type" typeHandler="com.gaoxi.typehandler.EnumTypeHandler"/>
        <result property="userStateEnum" column="user_state" typeHandler="com.gaoxi.typehandler.EnumTypeHandler"/>


        <!--一对一关联 role-->
        <association property="roleEntity" javaType="com.gaoxi.entity.user.RoleEntity">
            <result property="id" column="role_id"/>
            <result property="name" column="role_name"/>
            <result property="desc" column="role_desc"/>
        </association>
        <!--一对多关联-->
        <collection property="permissionList" ofType="com.gaoxi.entity.user.PermssionEntity">
            <result property="id" column="permission_id"/>
            <result property="permission" column="permission"/>
            <result property="desc" column="permission_desc"/>
        </collection>

    </resultMap>

    <update id="batchUpdateUserState">
        UPDATE sys_user
        SET user_statue = #{userStateCode}
        WHERE id in
        <foreach collection="userIdList"
                 index="index"
                 item="userId"
                 separator=","
                 open="(" close=")">
            #{userId}
        </foreach>
    </update>
    <update id="updateLocation">
        UPDATE location
        <set>
            <if test="locationUpdateReq.location != null">
                location = #{locationUpdateReq.location},
            </if>
            <if test="locationUpdateReq.name != null">
                location = #{locationUpdateReq.name},
            </if>
            <if test="locationUpdateReq.phone != null">
                location = #{locationUpdateReq.phone},
            </if>
            <if test="locationUpdateReq.postCode != null">
                location = #{locationUpdateReq.postCode},
            </if>
        </set>
        WHERE id = #{locationUpdateReq.locationId} and user_id = #{userId}
    </update>

    <insert id="createLocation">
        INSERT INTO gaoxi.location (id, location, name, phone, post_code, user_id)
                VALUES (#{id}, #{location}, #{name}, #{phone}, #{postCode}, #{userId} )
    </insert>

    <delete id="deleteRole">
        DELETE FROM sys_rile WHERE id = #{roleId}
    </delete>

    <delete id="deleteRolePermission">
        DELETE FROM sys_role_permission WHERE role_id = #{roleId}
    </delete>

    <delete id="deleteRoleMenu">
        DELETE FROM sys_role_menu WHERE role_id = #{roleId}
    </delete>

    <delete id="deleteLocation">
        DELETE FROM location where id = #{locationId} AND user_id = #{userId}
    </delete>

    <select id="findUsers" resultMap="userResultMap">
        SELECT user.id as id, username, phone, mail, licence_pic, register_time,
            user_type,
            user_state,
            role.id as role_id,
            role.name as role_desc,
            role.desc as role_desc,
            permission.id  as permission_id,
            permission.permission as permission,
            permission.desc as permission_desc
        FROM
            sys_user as user
              LEFT JOIN
            sys_role as role
              ON
            user.role_id = role.id
              LEFT JOIN
            sys_role_permission as role_permission
                ON
            role_permission.role_id = role.id
              LEFT JOIN
            sys_permission as permission
                ON
            role_permission.permission_id = permission.id
        <where>
            <if test="userQuery.id != null">
                user.id = #{userQuery.id}
            </if>
            <if test="userQuery.username != null">
                AND username = #{userQuery.username}
            </if>
            <if test="userQuery.password != null">
                AND password = #{userQuery.password}
            </if>
            <if test="userQuery.phone != null">
                AND phone = #{userQuery.phone}
            </if>
            <if test="userQuery.mail != null">
                AND mail = #{userQuery.mail}
            </if>
            <if test="userQuery.registerTimeStart != null">
                AND register_time &gt; registerTimeStart = #{userQuery.registerTimeStart}
            </if>
            <if test="userQueryReq.registerTimeEnd != null">
                AND
                register_time &lt; #{userQueryReq.registerTimeEnd}
            </if>
            <if test="userQueryReq.userType != null">
                AND
                user_type = #{userQueryReq.userType}
            </if>
            <if test="userQueryReq.userState != null">
                AND
                user_state = #{userQueryReq.userState}
            </if>
            <if test="userQueryReq.roleId != null">
                AND
                role_id = #{userQueryReq.roleId}
            </if>
        </where>
        <if test="userQueryReq.orderByRegisterTime != null and userQueryReq.orderByRegisterTime == 1">
            order by register_time DESC
        </if>
        <if test="userQueryReq.orderByRegisterTime != null and userQueryReq.orderByRegisterTime == 2">
            order by register_time ASC
        </if>
    </select>

    <select id="findRoles" resultType="com.gaoxi.entity.user.RoleEntity">
        SELECT * FROM sys_role
    </select>

    <select id="findPermissions" resultType="com.gaoxi.entity.user.PermissionEntity">
        SELECT * FROM sys_permission
    </select>

    <select id="findMenus" resultType="com.gaoxi.entity.user.MenuEntity">
        SELECT * FROM sys_menu
    </select>

    <select id="findLocations" resultType="com.gaoxi.entity.user.LocationEntity">
        SELECT location.id as id,
        location.location as location,
        location.user_id as userId,
        location.post_code as postCode,
        location.phone as phone,
        location.name as name
        FROM gaoxi.location as location WHERE gaoxi.location.user_id = #{userId}
    </select>

    <insert id="createUser">
        INSERT INTO sys_user (id,username,password,phone,mail,licence_pic,register_time,user_type,user_state,role_id)
        VALUES (#{id},#{username},#{password},#{phone},#{mail},#{licencePic},#{registerTime},#{userTypeEnum.code},#{userStateEnum.code},#{roleEntity.id})
    </insert>

    <insert id="insertRoleMenu">
        INSERT INTO sys_role_menu (role_id,menu_id)
        VALUES
        <foreach collection="roleMenuReq.menuIdList" item="menuId" index="index" separator=",">
            (#{roleMenuReq.roleId},#{menuId})
        </foreach>
    </insert>

    <insert id="insertRolePermission">
        INSERT INTO sys_role_permission (role_id,permission_id)
        VALUES
        <foreach collection="rolePermissionReq.permissionIdList" item="permissionId" index="index" separator=",">
            (#{rolePermissionReq.roleId},#{permissionId})
        </foreach>
    </insert>
</mapper>